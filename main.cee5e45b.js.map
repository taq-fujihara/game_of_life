{"version":3,"sources":["Cell.ts","Board.ts","main.ts"],"names":[],"mappings":"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","file":"main.cee5e45b.js","sourceRoot":"../src","sourcesContent":["export class Cell {\n  htmlElement: HTMLDivElement;\n  private alive = false\n\n  constructor(private row: number, private col: number) {\n    this.htmlElement = document.createElement(\"div\")\n    this.htmlElement.classList.add(\"cell\")\n  }\n\n  get isAlive(): boolean {\n    return this.alive\n    // return this.htmlElement.classList.contains(\"alive\")\n  }\n\n  toggleState() {\n    this.htmlElement.classList.toggle(\"alive\")\n    this.alive = !this.alive\n  }\n}\n","import { Cell } from \"./Cell\";\n\nexport class Board {\n  cells: Cell[][] = []\n\n  constructor(\n    private container: HTMLDivElement,\n    private height: number,\n    private width: number,\n  ) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Board width and height must be greater than 0\")\n    }\n\n    for (let row = 0; row < height; row++) {\n      const rowCells: Cell[] = []\n      const rowDiv: HTMLDivElement = document.createElement(\"div\");\n      rowDiv.classList.add(\"row\")\n\n      for (let col = 0; col < width; col++) {\n        const cell = new Cell(row, col)\n\n        // randomly generate alive cells\n        if (Math.round(Math.random() * 2) === 0) {\n          cell.toggleState()\n        }\n\n        rowCells.push(cell)\n      }\n      this.cells.push(rowCells)\n    }\n  }\n\n  render() {\n    for (const rowCells of this.cells) {\n      const row = document.createElement(\"div\")\n      row.classList.add(\"row\")\n      for (const cell of rowCells) {\n        row.appendChild(cell.htmlElement)\n      }\n      this.container.appendChild(row)\n    }\n  }\n\n  nextGeneration(): boolean {\n    const cellsChaningState = new Set<Cell>()\n\n    for (let row = 0; row < this.cells.length; row++) {\n      for (let col = 0; col < this.cells[row].length; col++) {\n        // takes cells next to the target(8 cells)\n        const cellsAround: Cell[] = []\n        const indexes = [\n          [row - 1, col - 1],\n          [row - 1, col],\n          [row - 1, col + 1],\n          [row, col - 1],\n          [row, col + 1],\n          [row + 1, col - 1],\n          [row + 1, col],\n          [row + 1, col + 1],\n        ]\n        for (const index of indexes) {\n          const cell = this.cellAt(index[0], index[1])\n          if (cell) {\n            cellsAround.push(cell)\n          }\n        }\n\n        const numAlive = cellsAround.filter(cell => cell.isAlive).length\n\n        if (this.test(this.cells[row][col], numAlive)) {\n          cellsChaningState.add(this.cells[row][col])\n        }\n      }\n    }\n\n    cellsChaningState.forEach(cell => {\n      cell.toggleState()\n    })\n\n    if (cellsChaningState.size === 0) {\n      return false\n    }\n\n    cellsChaningState.clear()\n\n    return true\n  }\n\n  cellAt(row: number, col: number): Cell | null {\n    if (row < 0 || row >= this.height) {\n      return null\n    }\n    if (col < 0 || col >= this.width) {\n      return null\n    }\n    return this.cells[row][col]\n  }\n\n  test(cell: Cell, numAlive: number): boolean {\n    // TODO Separate from this class\n    if (cell.isAlive) {\n      if (numAlive <= 1) {\n        return true\n      }\n      if (numAlive >= 4) {\n        return true\n      }\n    } else {\n      if (numAlive === 3) {\n        return true\n      }\n    }\n    return false\n  }\n\n  dispose() {\n    this.container.innerHTML = ''\n    this.cells = []\n  }\n}\n","import { Board } from \"./Board\";\n\nconst ELEMENT_GAME_BOARD = document.getElementById(\"board\") as HTMLDivElement\nconst ELEMENT_REFRESH_BUTTON = document.getElementById(\"refresh\")\nconst INTERVAL = 1200 \nconst BOARD_HEIGHT = 20\nconst BOARD_WIDTH = 30\n\nlet board: Board\nlet timer: number\n\nfunction main() {\n  if (board) {\n    board.dispose()\n  }\n\n  board = new Board(ELEMENT_GAME_BOARD, BOARD_HEIGHT, BOARD_WIDTH,)\n\n  board.render()\n\n  timer = setInterval(() => {\n    const cont = board.nextGeneration()\n    if (!cont) {\n      clearInterval(timer)\n    }\n  }, INTERVAL)\n}\n\nELEMENT_REFRESH_BUTTON.addEventListener(\"click\", () => {\n  clearInterval(timer)\n  main()\n})\n\nmain()\n"]}